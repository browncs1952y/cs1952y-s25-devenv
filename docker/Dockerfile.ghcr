FROM ubuntu:jammy

LABEL org.opencontainers.image.source https://github.com/browncs1952y/cs1952y-devenv

# set environment variables for tzdata
ARG TZ=America/New_York
ENV TZ=${TZ}

ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update &&\
  yes | unminimize &&\
  apt-get -y install\
  # install GCC-related packages
  binutils-doc cpp-doc gcc-doc g++ g++-multilib gdb gdb-doc glibc-doc\
  libstdc++-10-doc make make-doc cmake\
  # install clang related packages
  clang lldb clang-format\
  # install interactive programs (emacs, vim, nano, man, sudo, etc.)
  bc curl dc git git-doc man micro vim nano\
  # set up libraries
  libreadline-dev locales wamerican libssl-dev\
  # install programs used for networking
  psmisc sudo wget dnsutils inetutils-ping iproute2 net-tools netcat\
  telnet time traceroute \
  # install dependencies for gem5
  build-essential m4 scons zlib1g zlib1g-dev libprotobuf-dev\ 
  protobuf-compiler libprotoc-dev libgoogle-perftools-dev python3-dev\
  python3-pip libboost-all-dev pkg-config \
  # install dependencies for ripes
  ninja-build '^libxcb.*-dev' libx11-xcb-dev libegl1-mesa-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev

# set up default locale
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8

# remove unneeded .deb files
RUN rm -r /var/lib/apt/lists/*

# set up passwordless sudo for user cs1952y-user
RUN useradd -m -s /bin/bash cs1952y-user && \
  echo "cs1952y-user ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/cs1952y-init

# configure your environment
ARG USER=cs1952y\ User
ARG EMAIL=nobody@example.com

USER cs1952y-user

# create binary reporting version of dockerfile
RUN (echo '#\!/bin/sh'; echo 'echo 1') > /usr/bin/cs1952y-docker-version; chmod ugo+rx,u+w,go-w /usr/bin/cs1952y-docker-version

# build Qt6.8.0
RUN mkdir /Qt6.8.0 && cd /Qt6.8.0 &&\ 
  wget https://download.qt.io/official_releases/qt/6.8/6.8.0/submodules/qtbase-everywhere-src-6.8.0.tar.xz https://download.qt.io/official_releases/qt/6.8/6.8.0/submodules/qtcharts-everywhere-src-6.8.0.tar.xz https://download.qt.io/official_releases/qt/6.8/6.8.0/submodules/qtsvg-everywhere-src-6.8.0.tar.xz &&\
  for f in *.tar.xz; do tar xvf "$f"; done && rm *.tar.xz
 
RUN mkdir /Qt6.8.0/install

RUN cd /Qt6.8.0/qtbase-everywhere-src-6.8.0 && ./configure -prefix /Qt6.8.0/install &&\ 
cmake --build . --parallel && cmake --install .

RUN cd /Qt6.8.0/qtcharts-everywhere-src-6.8.0 &&\ 
/Qt6.8.0/install/bin/qt-configure-module . &&\
 cmake --build . --parallel && cmake --install .

RUN cd /Qt6.8.0/qtsvg-everywhere-src-6.8.0 &&\
 /Qt6.8.0/install/bin/qt-configure-module . &&\
  cmake --build . --parallel && cmake --install .

ENV CMAKE_PREFIX_PATH=/Qt6.8.0/install

# clone Ripes repo
RUN git clone --recursive https://github.com/browncs1952y/Ripes-1952y /home/cs1952y-user/Ripes

# build ripes from source
RUN cd /home/cs1952y-user/Ripes &&\
  cmake . -DCMAKE_PREFIX_PATH=/Qt6.8.0/install &&\
  make -j8

# clone and compile gem5
RUN git clone https://github.com/browncs1952y/gem5-assignments-stencil /home/cs1952y-user/gem5 &&\
  mkdir /gem5_build && mkdir /gem5_cache && cd /home/cs1952y-user/gem5 &&\
  scons defconfig /gem5_build build_opts/RISCV --ignore-style &&\
  scons setconfig /gem5_build USE_KVM=y --ignore-style &&\
  scons setconfig /gem5_build M5_BUILD_CACHE=/gem5_cache --ignore-style &&\
  scons /gem5_build/gem5.debug -j4 --linker=gold --limit-ld-memory-usage --ignore-style

RUN rm -f ~/.bash_logout

WORKDIR /home/cs1952y-user
CMD ["/bin/bash", "-l"]
